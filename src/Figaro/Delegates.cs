// ReSharper disable UnusedParameter.Local
// Copyright (C) 2009 Endpoint Systems. All rights reserved.




namespace Figaro
{
    using System;

    /// <summary>
    /// The events generated by replication views in Figaro HA.
    /// </summary>
    public class ReplicationViewArgs : EventArgs
    {
        /// <summary>
        /// Gets or sets the container name being replicated.
        /// </summary>
        public string Name { get; set; }
        /// <summary>
        /// Gets or sets the result of the operation.
        /// </summary>
        public UInt32 Result { get; set; }
    }
    /// <summary>
    /// The base for events generated by <see cref="FigaroEnv"/>
    /// </summary>
    public class XmlEnvEventArgs : EventArgs
    {
        /// <summary>
        /// Initializes a new instance of the XmlEnvEventArgs class.
        /// </summary>
        /// <param name="message">
        /// An event message to pass.
        /// </param>
        internal XmlEnvEventArgs(string message)
        {
        }

        /// <summary>Gets the content of the event message.</summary>
        /// <value>The content of the event message.</value>
        public string Message { get;  private set; }

        /// <summary>
        /// Gets the message prefix.
        /// </summary>
        /// <value>The message prefix value, if any.</value>
        public string Prefix { get; private set; }
    }

    /// <summary>
    /// Generated by the <see cref="FigaroEnv.OnMessage"/> event.
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <seealso cref="FigaroEnv.OnMessage"/>
    /// <seealso cref="FigaroEnv"/>
    public class MsgEventArgs : XmlEnvEventArgs
    {
        /// <summary>
        /// Prevents a default instance of the MsgEventArgs class from being created.
        /// </summary>
        private MsgEventArgs() : base(string.Empty)
        {
        }
    }

    /// <summary>
    /// Generated by the <see cref="FigaroEnv.OnErr"/> event.
    /// </summary>
    /// <seealso cref="FigaroEnv.OnErr"/>
    /// <seealso cref="FigaroEnv"/>
    public class ErrEventArgs : XmlEnvEventArgs
    {
        /// <summary>
        /// Initializes a new instance of the ErrEventArgs class.
        /// </summary>
        /// <param name="prefix">the prefix.</param>
        /// <param name="message">the message.</param>
        internal ErrEventArgs(string prefix, string message) : base(message)
        {
        }

        /// <summary>
        /// Prevents a default instance of the ErrEventArgs class from being created.
        /// </summary>
        
        private ErrEventArgs() : base(string.Empty) { }

        /// <summary>Gets or sets the error prefix.</summary><value>The error prefix.</value>
        public string Prefix { get; set; }
    }

    /// <summary>
    /// An <see cref="EventArgs"/> instance generated by the <see cref="FigaroEnv.OnProcess"/> event.
    /// </summary>
    /// <seealso cref="FigaroEnv.OnProcess"/>
    /// <seealso cref="FigaroEnv"/>
    public class ProcessEventArgs : EventArgs
    {
        /// <summary>
        /// Prevents a default instance of the ProcessEventArgs class from being created.
        /// </summary>
        private ProcessEventArgs() { }

        /// <summary>Gets or sets the event raised by the Figaro environment.</summary>
        /// <value>The <see cref="EnvironmentEvent"/> type.</value>
        public EnvironmentEvent EventType { get; set; }
    }

    /// <summary>
    /// Generated by the <see cref="FigaroEnv.OnProgress"/> event.
    /// </summary>
    /// <seealso cref="FigaroEnv.OnProgress"/>
    /// <seealso cref="FigaroEnv"/>
    public class ProgressEventArgs : EventArgs
    {
        /// <summary>
        /// Prevents a default instance of the ProgressEventArgs class from being created.
        /// </summary> 
        private ProgressEventArgs()
        {
        }

        /// <summary>Gets or sets the progress percentage of a particular event type.</summary><value>The progress percentage of a particular event type.</value>
        public int PercentComplete { get; set; }
        /// <summary>Gets or sets the event type.</summary>
        /// <value>The event type.</value>
        public FeedbackEvent EventType { get; set; }
    }

    /// <summary>
    /// Generated by the <see cref="FigaroEnv.OnIsAlive"/> event.
    /// </summary>
    /// <seealso cref="FigaroEnv.OnIsAlive"/>
    /// <seealso cref="FigaroEnv"/>
    public class IsAliveEventArgs : EventArgs
    {
        /// <summary>
        /// Prevents a default instance of the IsAliveEventArgs class from being created.
        /// </summary>
        private IsAliveEventArgs()
        {
        }

        /// <summary>Gets or sets the ID of the current process.</summary>
        /// <value>The current process ID.</value>
        public int ProcessId { get; set; }
        /// <summary>Gets or sets the ID of the current thread.</summary>
        /// <value>The current thread ID.</value>
        public int ThreadId { get; set; }
        /// <summary>Gets or sets a value indicating whether the process is alive. Returns </summary>
        /// <value><c>true</c> if the process is alive.</value>
        public bool MutexProcessOnly { get; set; }
    }

    /// <summary>
    /// The arguments to the <see cref="FigaroEnv.OnErr"/>
    /// </summary>
    public class BackupCloseArgs : EventArgs
    {
        public string DatabaseName { get; set; }
    }

    /// <summary>The event message handler for the <see cref="FigaroEnv.OnMessage"/> event.</summary>
    /// <param name="sender">The calling <see cref="FigaroEnv"/> object.</param>
    /// <param name="args">The <see cref="MsgEventArgs"/> instance.</param>
    /// <seealso cref="MsgEventArgs"/>
    /// <seealso cref="FigaroEnv"/>
    /// <seealso cref="FigaroEnv.OnMessage"/>
    public delegate void EnvMessageEventHandler(Object sender, MsgEventArgs args);
    /// <summary>The event message handler for the <see cref="FigaroEnv.OnErr"/> event.</summary>
    /// <param name="sender">The calling <see cref="FigaroEnv"/> object.</param>
    /// <param name="args">The <see cref="ErrEventArgs"/> instance.</param>
    /// <seealso cref="ErrEventArgs"/>
    /// <seealso cref="FigaroEnv"/>
    /// <seealso cref="FigaroEnv.OnErr"/>
    public delegate void EnvErrorEventHandler(Object sender, ErrEventArgs args);
    /// <summary>The event message handler for the <see cref="FigaroEnv.OnProcess"/> event.</summary>
    /// <param name="sender">The calling <see cref="FigaroEnv"/> object.</param>
    /// <param name="args">The <see cref="ProcessEventArgs"/> instance.</param>
    /// <seealso cref="ProcessEventArgs"/>
    /// <seealso cref="FigaroEnv"/>
    /// <seealso cref="FigaroEnv.OnProcess"/>
    public delegate void EnvProcessEventHandler(Object sender, ProcessEventArgs args);
    /// <summary>The event message handler for the <see cref="FigaroEnv.OnProgress"/> event.</summary>
    /// <param name="sender">The calling <see cref="FigaroEnv"/> object.</param>
    /// <param name="args">The <see cref="ProgressEventArgs"/> instance.</param>
    /// <seealso cref="ProgressEventArgs"/>
    /// <seealso cref="FigaroEnv"/>
    /// <seealso cref="FigaroEnv.OnProgress"/>
    public delegate void EnvProgressEventHandler(Object sender, ProgressEventArgs args);
    /// <summary>The event message handler for the <see cref="FigaroEnv.OnIsAlive"/> event.</summary>
    /// <param name="sender">The calling <see cref="FigaroEnv"/> object.</param>
    /// <param name="args">The <see cref="IsAliveEventArgs"/> instance.</param>
    /// <seealso cref="IsAliveEventArgs"/>
    /// <seealso cref="FigaroEnv"/>
    /// <seealso cref="FigaroEnv.OnIsAlive"/>
    public delegate void EnvIsAliveEventHandler(Object sender, IsAliveEventArgs args);

}

namespace Figaro    //namespace Figaro    
{
    using System;
    /// <summary>
    /// The stack frame event arguments.
    /// </summary>
    public class StackFrameEventArgs : EventArgs
    {
        /// <summary>
        /// The stack frame.
        /// </summary>
        protected XmlStackFrame _stack;

        /// <summary>
        /// Initializes a new instance of the StackFrameEventArgs class.
        /// </summary>
        internal StackFrameEventArgs() { }

        /// <summary>
        /// Gets the <see cref="XmlStackFrame"/> argument.
        /// </summary>
        public XmlStackFrame StackFrame { get;  private set; }
    }

    /// <summary>
    /// Gets the stack frame exception event arguments.
    /// </summary>
    public class StackFrameExceptionEventArgs : StackFrameEventArgs
    {
        /// <summary>
        /// Initializes a new instance of the StackFrameExceptionEventArgs class.
        /// </summary>
        internal StackFrameExceptionEventArgs() { }

        /// <summary>
        /// Gets the <see cref="XmlException"/> thrown.
        /// </summary>
        public XQueryException Exception { get;  private set; }
    }
}